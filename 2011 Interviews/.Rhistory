panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.8,0.75),
legend.key = element_blank(),
legend.background = element_rect(colour = NA),
legend.key.height = unit(4, "mm"),
legend.title = element_blank()
)
ggplot(data=df.m, aes(x=Harvest, y=value)) +
geom_line(aes(color=variable))+
theme_few()+
ylab("Proportional Abundance") +
xlab(expression(paste("Harvest Rate (", rho*, ")")))
ggplot(data=df.m, aes(x=Harvest, y=value)) +
geom_line(aes(color=variable))+
theme_few()+
ylab("Proportional Abundance") +
xlab(expression(paste("Harvest Rate (", rho^,"*", ")")))
ggplot(data=df.m, aes(x=Harvest, y=value)) +
geom_line(aes(color=variable))+
theme_few()+
ylab("Proportional Abundance") +
xlab(expression(paste("Harvest Rate (", rho,"*", ")")))
ggplot(data=df.m, aes(x=Harvest, y=value)) +
geom_line(aes(color=variable))+
theme_few()+
ylab("Proportional Abundance") +
xlab(expression(paste("Harvest Rate (", rho,"*", ")"))) +
scale_color_manual(values=cols) +
theme(axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14, angle=90),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.8,0.75),
legend.key = element_blank(),
legend.background = element_rect(colour = NA),
legend.key.height = unit(4, "mm"),
legend.title = element_blank()
)
##Script to create rho v. average savanna cover
##Figure for PNAS submission of Tree harvest theoretical paper
#############################################################################
# Parameter definitions                                                     #
#                                                                           #
# a = forest tree birth rate                                                #
# b = savanna sapling birth rate                                            #
# mu = savanna sapling death rate                                           #
# v = adult savanna tree mortality rate                                     #
# death.intr = forest tree intrinsic (non-fire) mortality rate              #
# death.fire = forest tree "fire" mortality rate                            #
# rec.intr = savanna sapling-to-adult intrinsic (non-fire) recruitment rate #
# rec.fire = savanna sapling-to-adult "fire" recruitment rate               #
# w = wood harvest rate                                                     #
#                                                                           #
# G = grass cover                                                           #
# S = savanna sapling cover                                                 #
# Tr = savanna adult tree cover                                             #
# Ft = forest adult tree cover                                              #
#############################################################################
rm(list=ls())
#load function files
# source("/Users/atredenn/Dropbox/HarvestTheory/Code/SFG_ModelFunction.R")
source("/Users/atredenn/Dropbox/HarvestTheory/Code/SFG_ModelFunction_HarvestTreeIndependent.R")
### Set-up simulation for a plot of harvest intensity vs. average G over 10,000 years
w.s = seq(0,0.1,by=0.0005)
# Parameter values for normal year
# a=0.3
# b = 0.05
# mu = 0.08
# v = 0.005
# time=10000
# t.min=time/2
# death.fire = 0.3
# rec.fire = 0.05
# death.intr = 0.005
# rec.intr = 0.3
# Parameter values for drought year
a=0.3
b = 0.05
mu = 0.15
v = 0.005
time=10000
t.min=time/2
death.fire = 0.3
rec.fire = 0.05
death.intr = 0.005
rec.intr = 0.1
#State variable storage vectors
Tr=numeric(time)
S=numeric(time)
G=numeric(time)
Ft=numeric(time)
# #Starting values
Tr[1] = 0.4
S[1] = 0.4
G[1] = 0.2
Ft[1] = 0
outAvg <- matrix(ncol=4, nrow=length(w.s))
for(i in 1:length(w.s)){
outs <- savanna.model(G=G,
S=S,
Tr=Tr,
Ft=Ft,
time=time,
a=a,
b=b,
mu=mu,
v=v,
w=w.s[i],
death.fire=death.fire,
rec.fire=rec.fire,
death.intr=death.intr,
rec.intr=rec.intr)
outAvg[i,1] <- mean(outs[t.min:time,1])
outAvg[i,2] <- mean(outs[t.min:time,2])
outAvg[i,3] <- mean(outs[t.min:time,3])
outAvg[i,4] <- mean(outs[t.min:time,4])
}
##Script to create rho v. average savanna cover
##Figure for PNAS submission of Tree harvest theoretical paper
#############################################################################
# Parameter definitions                                                     #
#                                                                           #
# a = forest tree birth rate                                                #
# b = savanna sapling birth rate                                            #
# mu = savanna sapling death rate                                           #
# v = adult savanna tree mortality rate                                     #
# death.intr = forest tree intrinsic (non-fire) mortality rate              #
# death.fire = forest tree "fire" mortality rate                            #
# rec.intr = savanna sapling-to-adult intrinsic (non-fire) recruitment rate #
# rec.fire = savanna sapling-to-adult "fire" recruitment rate               #
# w = wood harvest rate                                                     #
#                                                                           #
# G = grass cover                                                           #
# S = savanna sapling cover                                                 #
# Tr = savanna adult tree cover                                             #
# Ft = forest adult tree cover                                              #
#############################################################################
rm(list=ls())
#load function files
# source("/Users/atredenn/Dropbox/HarvestTheory/Code/SFG_ModelFunction.R")
source("/Users/atredenn/Dropbox/HarvestTheory/Code/SFG_ModelFunction_HarvestTreeIndependent.R")
### Set-up simulation for a plot of harvest intensity vs. average G over 10,000 years
w.s = seq(0,0.1,by=0.0005)
# Parameter values for normal year
a=0.3
b = 0.05
mu = 0.08
v = 0.005
time=10000
t.min=time/2
death.fire = 0.3
rec.fire = 0.05
death.intr = 0.005
rec.intr = 0.3
# Parameter values for drought year
# a=0.3
# b = 0.05
# mu = 0.15
# v = 0.005
# time=10000
# t.min=time/2
# death.fire = 0.3
# rec.fire = 0.05
# death.intr = 0.005
# rec.intr = 0.1
#State variable storage vectors
Tr=numeric(time)
S=numeric(time)
G=numeric(time)
Ft=numeric(time)
# #Starting values
Tr[1] = 0.4
S[1] = 0.4
G[1] = 0.2
Ft[1] = 0
outAvg <- matrix(ncol=4, nrow=length(w.s))
for(i in 1:length(w.s)){
outs <- savanna.model(G=G,
S=S,
Tr=Tr,
Ft=Ft,
time=time,
a=a,
b=b,
mu=mu,
v=v,
w=w.s[i],
death.fire=death.fire,
rec.fire=rec.fire,
death.intr=death.intr,
rec.intr=rec.intr)
outAvg[i,1] <- mean(outs[t.min:time,1])
outAvg[i,2] <- mean(outs[t.min:time,2])
outAvg[i,3] <- mean(outs[t.min:time,3])
outAvg[i,4] <- mean(outs[t.min:time,4])
}
df <- data.frame(Grass = outAvg[,1],
Sapling = outAvg[,2],
Savanna = outAvg[,3],
Forest = outAvg[,4],
Harvest = w.s)
library(reshape2)
df.m <- melt(data=df, id.vars="Harvest")
library(ggplot2)
library(ggthemes)
library(grid)
cols <- c("#999999", "#E69F00", "#56B4E9", "darkgreen")
# ggplot(data=df.m, aes(x=Harvest, y=value)) +
#   geom_line(aes(color=variable))+
#   theme_few()+
#   ylab("Proportional Abundance") +
#   xlab(expression(paste("Harvest Rate (", rho, ")"))) +
#   scale_color_manual(values=cols) +
#   theme(axis.title.x = element_text(size=14),
#         axis.title.y = element_text(size=14, angle=90),
#         axis.text.x = element_text(size=12),
#         axis.text.y = element_text(size=12),
#         panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         legend.position = c(0.8,0.75),
#         legend.key = element_blank(),
#         legend.background = element_rect(colour = NA),
#         legend.key.height = unit(4, "mm"),
#         legend.title = element_blank()
#   )
ggplot(data=df.m, aes(x=Harvest, y=value)) +
geom_line(aes(color=variable))+
theme_few()+
ylab("Proportional Abundance") +
xlab(expression(paste("Harvest Rate (", rho,"*", ")"))) +
scale_color_manual(values=cols) +
theme(axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14, angle=90),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.8,0.75),
legend.key = element_blank(),
legend.background = element_rect(colour = NA),
legend.key.height = unit(4, "mm"),
legend.title = element_blank()
)
rm(list=ls())
#load function files
source("/Users/atredenn/Dropbox/HarvestTheory/Code/SFG_ModelFunction_HarvestTreeIndependent.R")
### Set-up simulation for a plot of harvest intensity vs. average G over 10,000 years
w.s = seq(0,0.1,by=0.0005)
# Parameter values for stable forest
# a = seq(0.1, 0.6, 0.06)
a=0.3
b = 0.4
mu = 0.3
v = 0.15
time=10000
t.min=time/2
death.fire = 0.3
rec.fire = 0.4
death.intr = 0.005
rec.intr = 0.9
#State variable storage vectors
Tr=numeric(time)
S=numeric(time)
G=numeric(time)
Ft=numeric(time)
# #Starting values
Tr[1] = 0
S[1] = 0
G[1] = 0
Ft[1] = 1
outAvg <- matrix(ncol=4, nrow=length(w.s))
for(i in 1:length(w.s)){
outs <- savanna.model(G=G,
S=S,
Tr=Tr,
Ft=Ft,
time=time,
a=a,
b=b,
mu=mu,
v=v,
w=w.s[i],
death.fire=death.fire,
rec.fire=rec.fire,
death.intr=death.intr,
rec.intr=rec.intr)
outAvg[i,1] <- mean(outs[t.min:time,1])
outAvg[i,2] <- mean(outs[t.min:time,2])
outAvg[i,3] <- mean(outs[t.min:time,3])
outAvg[i,4] <- mean(outs[t.min:time,4])
}
df <- data.frame(Grass = outAvg[,1],
Sapling = outAvg[,2],
Savanna = outAvg[,3],
Forest = outAvg[,4],
Harvest = w.s)
library(reshape2)
df.m <- melt(data=df, id.vars="Harvest")
library(ggplot2)
library(ggthemes)
library(grid)
cols <- c("#999999", "#E69F00", "#56B4E9", "darkgreen")
ggplot(data=df.m, aes(x=Harvest, y=value)) +
geom_line(aes(color=variable))+
theme_few()+
ylab("Proportional Abundance") +
xlab(expression(paste("Harvest Rate (", rho,"*", ")"))) +
scale_color_manual(values=cols) +
theme(axis.title.x = element_text(size=14),
axis.title.y = element_text(size=14, angle=90),
axis.text.x = element_text(size=12),
axis.text.y = element_text(size=12),
panel.grid.major = element_blank(),
panel.grid.minor = element_blank(),
legend.position = c(0.8,0.75),
legend.key = element_blank(),
legend.background = element_rect(colour = NA),
legend.key.height = unit(4, "mm"),
legend.title = element_blank()
)
#######OLD PLOT##################################
#
#
#
# #Storage vector for average G
# G.avg <- matrix(nrow=length(w.s), ncol=length(a))
#
# for (i in 1: length(w.s)){
#   for (j in 1:length(a)){
#     outs <- savanna.model(G=G,
#                           S=S,
#                           Tr=Tr,
#                           Ft=Ft,
#                           time=time,
#                           a=a[j],
#                           b=b,
#                           mu=mu,
#                           v=v,
#                           w=w.s[i],
#                           death.fire=death.fire,
#                           rec.fire=rec.fire,
#                           death.intr=death.intr,
#                           rec.intr=rec.intr)
#     G.avg[i,j] <- mean(outs[t.min:time,1])
#   }
# }
#
#
# # matplot(w.s, G.avg, type="l")
# df <- data.frame(alpha1=G.avg[,1],
#                  alpha2=G.avg[,2],
#                  alpha3=G.avg[,3],
#                  alpha4=G.avg[,4],
#                  alpha5=G.avg[,5],
#                  alpha6=G.avg[,6],
#                  alpha7=G.avg[,7],
#                  alpha8=G.avg[,8],
#                  alpha9=G.avg[,9])
#
# library(plyr)
# library(reshape2)
# df.m <- melt(data=df, varnames=df$harvest)
# df.m$harvest=rep(w.s,times=length(G.avg[1]))
# library(ggplot2)
# library(RColorBrewer)
# library(grid)
# col.shade <- brewer.pal(9, "Greens")
# labs = as.character(a)
# y.labs = rep(1.02,7)
# x.labs = c(0.05, 0.1, 0.19, 0.3, 0.37, 0.5, 0.6)
#
# ggplot(data=df.m, aes(x=harvest, y=value)) +
#   geom_ribbon(aes(ymin=0, ymax=value, fill=variable)) +
#   geom_line(aes(color=variable), size=1) +
#   scale_fill_manual(name = expression(alpha),
#                      values = col.shade,
#                     labels=labs) +
#   scale_color_manual(name = expression(alpha),
#                     values = rep("white",9),
#                      labels=labs) +
#   theme_bw() +
#   xlab(expression(paste("Tree Harvest Rate (", rho, ")"))) +
#   ylab("Average Grass Cover (G)") +
#   theme(axis.title.x = element_text(size=14),
#         axis.title.y = element_text(size=14, angle=90),
#         axis.text.x = element_text(size=12),
#         axis.text.y = element_text(size=12),
#         panel.grid.major = element_blank(),
#         panel.grid.minor = element_blank(),
#         legend.position = "right",
#         legend.key = element_blank()
#   )
#
#
#
ggplot()+
geom_point(data=hts, aes(x=Initial/100, y=log(Height)), shape=1)+
#   stat_smooth(data=hts, aes(x=Initial/100, y=Height), method="lm", se=FALSE)+
#   stat_smooth(data=hts, aes(x=Initial/100, y=Height), color="red", se=FALSE)+
xlab("Initial Biomass (kg)") + ylab("Height after 3 years (m)")+
theme_few()
source('~/.active-rstudio-document', echo=TRUE)
ggplot()+
geom_point(data=hts, aes(x=log(Initial/100), y=log(Height)), shape=1)+
#   stat_smooth(data=hts, aes(x=Initial/100, y=Height), method="lm", se=FALSE)+
#   stat_smooth(data=hts, aes(x=Initial/100, y=Height), color="red", se=FALSE)+
xlab("Initial Biomass (kg)") + ylab("Height after 3 years (m)")+
theme_few()
ggplot()+
geom_point(data=hts, aes(x=log(Initial/100), y=log(Height)), shape=1)+
#   stat_smooth(data=hts, aes(x=Initial/100, y=Height), method="lm", se=FALSE)+
#   stat_smooth(data=hts, aes(x=Initial/100, y=Height), color="red", se=FALSE)+
xlab("ln(Initial Biomass (kg))") + ylab("ln(Height after 3 years (m))")+
theme_few()
head(allD)
allD$Resprout <- NA
ifelse(is.na(allD$Height..m.)==TRUE, allD$Resprout=0, allD$Resprout=1)
ifelse(is.na(allD$Height..m.)==TRUE, allD$Resprout<-0, allD$Resprout<-1)
head(allD)
is.na(allD$Height..m.)
dim(allD)
dim(allD)[2]
allD$Resprout <- NA
allD[dim(allD)[2], which(is.na(allD$Height..m.)==TRUE)] <- 0
allD[which(is.na(allD$Height..m.)==TRUE), dim(allD)[2]] <- 0
head(allD)
which(is.na(allD$Height..m.)==TRUE
)
which(-is.na(allD$Height..m.)==TRUE)
allD$Resprout <- NA
allD[which(is.na(allD$Height..m.)==TRUE), dim(allD)[2]] <- 0
allD[which(is.na(allD$Resprout)==TRUE), dim(allD)[2]] <- 1
head(allD)
#Now go logistic regression based on initial size
resprout.out<-glm(Resprout~Initial.Biomass..g.,data=allD,family="binomial")
newdata2 <- with(hts, data.frame(Initial.Biomass..g. = seq(0,250000, by=1000)))
predR <- as.data.frame(predict(resprout.out, newdata=newdata2, type="link", se=TRUE))
predR <- within(predR, {
PredictedProb <- plogis(fit)
LL <- plogis(fit - (1.96 * se.fit))
UL <- plogis(fit + (1.96 * se.fit))
})
predR$Initial <- seq(0,250000, by=1000)
ggplot()+
geom_point(data=allD, aes(x=Initial.Biomass..g./100, y=Rec), shape=1)+
geom_line(data=predR, aes(x = Initial/100, y = PredictedProb), color="black", size=1)+
xlab("Initial Biomass (kg)") + ylab("Probability of Resprouting")+
theme_few()
ggplot()+
geom_point(data=allD, aes(x=Initial.Biomass..g./100, y=Resprout), shape=1)+
geom_line(data=predR, aes(x = Initial/100, y = PredictedProb), color="black", size=1)+
xlab("Initial Biomass (kg)") + ylab("Probability of Resprouting")+
theme_few()
summary(resprout.out)
resprout.out<-glm(Resprout~Species,data=allD,family="binomial")
summary(resprout.out)
head(allD)
allD$rgr <- allD$Height..m./3
g.out<-lm(rgr~Initial.Biomass..g.,data=allD)
g.sigma<-sd(resid(g.out))
summary(g.out)
plot.lm(g.out)
g.out<-lm(log(rgr)~log(Initial.Biomass..g.),data=allD)
g.sigma<-sd(resid(g.out))
summary(g.out)
plot.lm(g.out)
ggplot(data=allD, aes(x=Initial.Biomass..g., y=rgr))+
geom_point(shape=1)+
geom_line(stat="lm")
ggplot(data=allD, aes(x=Initial.Biomass..g., y=rgr))+
geom_point(shape=1)+
stat_smooth(method="lm")
g.out<-lm(rgr~Initial.Biomass..g.,data=allD)
plot.lm(g.out)
subD.out <- allD[allD$Initial.Biomass..g.<200000]
subD.out <- allD[allD$Initial.Biomass..g.<200000,]
g.out<-lm(rgr~Initial.Biomass..g.,data=allD)
g.sigma<-sd(resid(g.out))
g.out<-lm(rgr~Initial.Biomass..g.,data=subD.out)
g.sigma<-sd(resid(g.out))
summary(g.out)
ggplot(data=subD.out, aes(x=Initial.Biomass..g., y=rgr))+
geom_point(shape=1)+
stat_smooth(method="lm")
g.out<-lm(log(rgr)~log(Initial.Biomass..g.),data=subD.out)
g.sigma<-sd(resid(g.out))
summary(g.out)
ggplot(data=subD.out, aes(x=log(Initial.Biomass..g.), y=log(rgr)))+
geom_point(shape=1)+
stat_smooth(method="lm")
ggplot(data=subD.out, aes(x=log(Initial.Biomass..g.), y=log(rgr)))+
geom_point(shape=1)+
stat_smooth(method="lm")+
theme_few()
ggplot(data=subD.out, aes(x=log(Initial.Biomass..g.), y=log(rgr)))+
geom_point(shape=1)+
stat_smooth(method="lm", color="red")+
theme_few()
plot.lm(g.out)
head(subD.out)
source('~/.active-rstudio-document', echo=TRUE)
ggplot(data=subD.out, aes(x=log(Initial.Biomass..g.), y=rgr))+
geom_point(shape=1)+
stat_smooth(method="lm", color="red")+
theme_few()
ggplot(data=subD.out, aes(x=log(Initial.Biomass..g.), y=log(rgr)))+
geom_point(shape=1)+
stat_smooth(method="lm", color="red")+
theme_few()
